// <auto-generated />
using dias.events.Data.Platform;
using dias.events.Models.DTOs;
using dias_events.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace dias_events.Migrations
{
    [DbContext(typeof(DiasContext))]
    partial class DiasContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("dias.events.Data.Platform.Answer", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("created");

                    b.Property<string>("createdby");

                    b.Property<DateTime>("modified");

                    b.Property<string>("modifiedby");

                    b.Property<bool>("paid");

                    b.Property<long?>("priceid");

                    b.Property<long?>("questionid");

                    b.Property<int>("sortorder");

                    b.Property<string>("text");

                    b.Property<string>("value");

                    b.HasKey("id");

                    b.HasIndex("priceid");

                    b.HasIndex("questionid");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Bootcamp", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address1");

                    b.Property<string>("address2");

                    b.Property<string>("badgename");

                    b.Property<string>("camps");

                    b.Property<string>("city");

                    b.Property<DateTime?>("cleared");

                    b.Property<string>("country");

                    b.Property<string>("coupon");

                    b.Property<DateTime>("created");

                    b.Property<string>("createdby");

                    b.Property<string>("email");

                    b.Property<string>("firstname");

                    b.Property<string>("lastname");

                    b.Property<bool>("member");

                    b.Property<DateTime>("modified");

                    b.Property<string>("modifiedby");

                    b.Property<DateTime?>("paid");

                    b.Property<string>("phone");

                    b.Property<string>("postalcode");

                    b.Property<string>("state");

                    b.Property<DateTime>("submitted");

                    b.Property<decimal>("subtotal");

                    b.Property<decimal>("total");

                    b.HasKey("id");

                    b.ToTable("Bootcamps");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Choice", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("answerid");

                    b.Property<DateTime>("created");

                    b.Property<string>("createdby");

                    b.Property<DateTime>("modified");

                    b.Property<string>("modifiedby");

                    b.Property<long>("questionid");

                    b.Property<long>("submissionid");

                    b.Property<string>("text");

                    b.Property<int>("type");

                    b.HasKey("id");

                    b.HasIndex("answerid");

                    b.HasIndex("questionid");

                    b.HasIndex("submissionid");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("dias.events.Data.Platform.ChoiceAnswer", b =>
                {
                    b.Property<long>("answerid");

                    b.Property<long>("choiceid");

                    b.HasKey("answerid", "choiceid");

                    b.HasIndex("choiceid");

                    b.ToTable("ChoiceAnswers");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Coupon", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("Submissionid");

                    b.Property<DateTime>("created");

                    b.Property<string>("createdby");

                    b.Property<int>("maxuses");

                    b.Property<DateTime>("modified");

                    b.Property<string>("modifiedby");

                    b.Property<string>("text");

                    b.Property<int>("type");

                    b.Property<decimal>("value");

                    b.HasKey("id");

                    b.HasIndex("Submissionid");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Dependency", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("behaviour");

                    b.Property<DateTime>("created");

                    b.Property<string>("createdby");

                    b.Property<DateTime>("modified");

                    b.Property<string>("modifiedby");

                    b.Property<long>("questionid");

                    b.HasKey("id");

                    b.HasIndex("questionid");

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Event", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("active");

                    b.Property<DateTime>("activedate");

                    b.Property<DateTime>("created");

                    b.Property<string>("createdby");

                    b.Property<DateTime>("deactivatedate");

                    b.Property<string>("description");

                    b.Property<DateTime>("enddate");

                    b.Property<DateTime>("latedate");

                    b.Property<long?>("locationid");

                    b.Property<DateTime>("modified");

                    b.Property<string>("modifiedby");

                    b.Property<string>("name");

                    b.Property<long>("organisationid");

                    b.Property<string>("slug");

                    b.Property<DateTime>("startdate");

                    b.Property<string>("title");

                    b.HasKey("id");

                    b.HasIndex("locationid");

                    b.HasIndex("organisationid");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("dias.events.Data.Platform.FormEntry", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("created");

                    b.Property<string>("createdby");

                    b.Property<int>("defaultstate");

                    b.Property<long>("eventid");

                    b.Property<DateTime>("modified");

                    b.Property<string>("modifiedby");

                    b.Property<int>("page");

                    b.Property<int>("sortorder");

                    b.Property<int>("type");

                    b.HasKey("id");

                    b.HasIndex("eventid");

                    b.ToTable("FormEntries");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Location", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address1");

                    b.Property<string>("address2");

                    b.Property<string>("city");

                    b.Property<string>("colour");

                    b.Property<string>("country");

                    b.Property<DateTime>("created");

                    b.Property<string>("createdby");

                    b.Property<DateTime>("modified");

                    b.Property<string>("modifiedby");

                    b.Property<string>("name");

                    b.Property<string>("postalcode");

                    b.Property<string>("province");

                    b.Property<bool>("showmap");

                    b.HasKey("id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Organisation", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("active");

                    b.Property<DateTime>("created");

                    b.Property<string>("createdby");

                    b.Property<string>("description");

                    b.Property<string>("displaytitle");

                    b.Property<long?>("locationid");

                    b.Property<DateTime>("modified");

                    b.Property<string>("modifiedby");

                    b.Property<string>("name");

                    b.HasKey("id");

                    b.HasIndex("locationid");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Price", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("created");

                    b.Property<string>("createdby");

                    b.Property<decimal>("late");

                    b.Property<DateTime>("modified");

                    b.Property<string>("modifiedby");

                    b.Property<decimal>("regular");

                    b.HasKey("id");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Question", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("Couponid");

                    b.Property<DateTime>("created");

                    b.Property<string>("createdby");

                    b.Property<long>("eventid");

                    b.Property<long?>("locationid");

                    b.Property<DateTime>("modified");

                    b.Property<string>("modifiedby");

                    b.Property<bool>("paid");

                    b.Property<long?>("priceid");

                    b.Property<bool>("required");

                    b.Property<long>("slotid");

                    b.Property<string>("text");

                    b.Property<long?>("timeslotid");

                    b.Property<int>("type");

                    b.HasKey("id");

                    b.HasIndex("Couponid");

                    b.HasIndex("eventid");

                    b.HasIndex("locationid");

                    b.HasIndex("priceid");

                    b.HasIndex("slotid")
                        .IsUnique();

                    b.HasIndex("timeslotid");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Static", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address1");

                    b.Property<string>("address2");

                    b.Property<string>("badgename");

                    b.Property<string>("city");

                    b.Property<DateTime?>("cleared");

                    b.Property<string>("country");

                    b.Property<string>("coupon");

                    b.Property<DateTime>("created");

                    b.Property<string>("createdby");

                    b.Property<string>("email");

                    b.Property<string>("firstname");

                    b.Property<string>("intensives");

                    b.Property<string>("lastname");

                    b.Property<int>("manuscriptcritiques");

                    b.Property<bool>("member");

                    b.Property<DateTime>("modified");

                    b.Property<string>("modifiedby");

                    b.Property<DateTime?>("paid");

                    b.Property<string>("phone");

                    b.Property<int>("portfoliocritiques");

                    b.Property<string>("postalcode");

                    b.Property<string>("state");

                    b.Property<DateTime>("submitted");

                    b.Property<decimal>("subtotal");

                    b.Property<decimal>("total");

                    b.Property<string>("workshops");

                    b.HasKey("id");

                    b.ToTable("StaticForms");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Submission", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("cleared");

                    b.Property<DateTime>("created");

                    b.Property<string>("createdby");

                    b.Property<long>("eventid");

                    b.Property<DateTime>("modified");

                    b.Property<string>("modifiedby");

                    b.Property<DateTime?>("paid");

                    b.Property<string>("submitter");

                    b.Property<decimal>("subtotal");

                    b.Property<decimal>("total");

                    b.HasKey("id");

                    b.HasIndex("eventid");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("dias.events.Data.Platform.TimeSlot", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("created");

                    b.Property<string>("createdby");

                    b.Property<string>("description");

                    b.Property<DateTime>("end");

                    b.Property<DateTime>("modified");

                    b.Property<string>("modifiedby");

                    b.Property<string>("name");

                    b.Property<DateTime>("start");

                    b.HasKey("id");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Answer", b =>
                {
                    b.HasOne("dias.events.Data.Platform.Price", "price")
                        .WithMany()
                        .HasForeignKey("priceid");

                    b.HasOne("dias.events.Data.Platform.Question", "question")
                        .WithMany("answers")
                        .HasForeignKey("questionid");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Choice", b =>
                {
                    b.HasOne("dias.events.Data.Platform.Answer", "answer")
                        .WithMany()
                        .HasForeignKey("answerid");

                    b.HasOne("dias.events.Data.Platform.Question", "question")
                        .WithMany()
                        .HasForeignKey("questionid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dias.events.Data.Platform.Submission", "submission")
                        .WithMany("answers")
                        .HasForeignKey("submissionid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dias.events.Data.Platform.ChoiceAnswer", b =>
                {
                    b.HasOne("dias.events.Data.Platform.Answer", "answer")
                        .WithMany("selections")
                        .HasForeignKey("answerid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dias.events.Data.Platform.Choice", "choice")
                        .WithMany("selections")
                        .HasForeignKey("choiceid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dias.events.Data.Platform.Coupon", b =>
                {
                    b.HasOne("dias.events.Data.Platform.Submission")
                        .WithMany("coupons")
                        .HasForeignKey("Submissionid");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Dependency", b =>
                {
                    b.HasOne("dias.events.Data.Platform.Question", "question")
                        .WithMany("dependencies")
                        .HasForeignKey("questionid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dias.events.Data.Platform.Event", b =>
                {
                    b.HasOne("dias.events.Data.Platform.Location", "location")
                        .WithMany()
                        .HasForeignKey("locationid");

                    b.HasOne("dias.events.Data.Platform.Organisation", "organisation")
                        .WithMany("events")
                        .HasForeignKey("organisationid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dias.events.Data.Platform.FormEntry", b =>
                {
                    b.HasOne("dias.events.Data.Platform.Event", "parent")
                        .WithMany("formentries")
                        .HasForeignKey("eventid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dias.events.Data.Platform.Organisation", b =>
                {
                    b.HasOne("dias.events.Data.Platform.Location", "location")
                        .WithMany()
                        .HasForeignKey("locationid");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Question", b =>
                {
                    b.HasOne("dias.events.Data.Platform.Coupon")
                        .WithMany("questions")
                        .HasForeignKey("Couponid");

                    b.HasOne("dias.events.Data.Platform.Event", "parent")
                        .WithMany("questions")
                        .HasForeignKey("eventid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dias.events.Data.Platform.Location", "location")
                        .WithMany()
                        .HasForeignKey("locationid");

                    b.HasOne("dias.events.Data.Platform.Price", "price")
                        .WithMany()
                        .HasForeignKey("priceid");

                    b.HasOne("dias.events.Data.Platform.FormEntry", "slot")
                        .WithOne("question")
                        .HasForeignKey("dias.events.Data.Platform.Question", "slotid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dias.events.Data.Platform.TimeSlot", "time")
                        .WithMany()
                        .HasForeignKey("timeslotid");
                });

            modelBuilder.Entity("dias.events.Data.Platform.Submission", b =>
                {
                    b.HasOne("dias.events.Data.Platform.Event")
                        .WithMany("responses")
                        .HasForeignKey("eventid")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
